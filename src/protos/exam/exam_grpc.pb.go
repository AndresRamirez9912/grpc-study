// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: exam.proto

package examProtos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExamService_CreateExam_FullMethodName     = "/exam.ExamService/CreateExam"
	ExamService_GetExam_FullMethodName        = "/exam.ExamService/GetExam"
	ExamService_CreateQuestion_FullMethodName = "/exam.ExamService/CreateQuestion"
)

// ExamServiceClient is the client API for ExamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExamServiceClient interface {
	CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error)
	GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*Exam, error)
	CreateQuestion(ctx context.Context, opts ...grpc.CallOption) (ExamService_CreateQuestionClient, error)
}

type examServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExamServiceClient(cc grpc.ClientConnInterface) ExamServiceClient {
	return &examServiceClient{cc}
}

func (c *examServiceClient) CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error) {
	out := new(CreateExamResponse)
	err := c.cc.Invoke(ctx, ExamService_CreateExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*Exam, error) {
	out := new(Exam)
	err := c.cc.Invoke(ctx, ExamService_GetExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) CreateQuestion(ctx context.Context, opts ...grpc.CallOption) (ExamService_CreateQuestionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExamService_ServiceDesc.Streams[0], ExamService_CreateQuestion_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &examServiceCreateQuestionClient{stream}
	return x, nil
}

type ExamService_CreateQuestionClient interface {
	Send(*Question) error
	CloseAndRecv() (*CreateQuestionResponse, error)
	grpc.ClientStream
}

type examServiceCreateQuestionClient struct {
	grpc.ClientStream
}

func (x *examServiceCreateQuestionClient) Send(m *Question) error {
	return x.ClientStream.SendMsg(m)
}

func (x *examServiceCreateQuestionClient) CloseAndRecv() (*CreateQuestionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateQuestionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExamServiceServer is the server API for ExamService service.
// All implementations must embed UnimplementedExamServiceServer
// for forward compatibility
type ExamServiceServer interface {
	CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error)
	GetExam(context.Context, *GetExamRequest) (*Exam, error)
	CreateQuestion(ExamService_CreateQuestionServer) error
	mustEmbedUnimplementedExamServiceServer()
}

// UnimplementedExamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExamServiceServer struct {
}

func (UnimplementedExamServiceServer) CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExam not implemented")
}
func (UnimplementedExamServiceServer) GetExam(context.Context, *GetExamRequest) (*Exam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExam not implemented")
}
func (UnimplementedExamServiceServer) CreateQuestion(ExamService_CreateQuestionServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedExamServiceServer) mustEmbedUnimplementedExamServiceServer() {}

// UnsafeExamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamServiceServer will
// result in compilation errors.
type UnsafeExamServiceServer interface {
	mustEmbedUnimplementedExamServiceServer()
}

func RegisterExamServiceServer(s grpc.ServiceRegistrar, srv ExamServiceServer) {
	s.RegisterService(&ExamService_ServiceDesc, srv)
}

func _ExamService_CreateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).CreateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_CreateExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).CreateExam(ctx, req.(*CreateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExam(ctx, req.(*GetExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_CreateQuestion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExamServiceServer).CreateQuestion(&examServiceCreateQuestionServer{stream})
}

type ExamService_CreateQuestionServer interface {
	SendAndClose(*CreateQuestionResponse) error
	Recv() (*Question, error)
	grpc.ServerStream
}

type examServiceCreateQuestionServer struct {
	grpc.ServerStream
}

func (x *examServiceCreateQuestionServer) SendAndClose(m *CreateQuestionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *examServiceCreateQuestionServer) Recv() (*Question, error) {
	m := new(Question)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExamService_ServiceDesc is the grpc.ServiceDesc for ExamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam.ExamService",
	HandlerType: (*ExamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExam",
			Handler:    _ExamService_CreateExam_Handler,
		},
		{
			MethodName: "GetExam",
			Handler:    _ExamService_GetExam_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateQuestion",
			Handler:       _ExamService_CreateQuestion_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "exam.proto",
}
